<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 
		LocalSessionFactoryBean对hibernate的SessionFactory做了封装.  
		configLocation:  读取classpath目录下（src目录下）的hiberante配置文件：hibernate.cfg.xml
	-->
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	</bean> -->
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	</bean>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	</bean>
	
	<!--定义hibernate事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource"/>
	</bean>	
	
	<!-- 事务控制的通知配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
	    <tx:attributes>  
	        <tx:method name="get*" propagation="REQUIRED" read-only="true" />
	        <tx:method name="show*" propagation="REQUIRED" read-only="true" />
	        <tx:method name="search*" read-only="true" />  
	        <tx:method name="load*" read-only="true" />  
	        <tx:method name="query*" read-only="true" />  
	        <tx:method name="list*" read-only="true" />  
	        <tx:method name="remove*"  propagation="REQUIRED"/>
	        <tx:method name="del*"  propagation="REQUIRED"/>  
	        <tx:method name="save*" propagation="REQUIRED" />  
	        <tx:method name="create*" propagation="REQUIRED" />  
	        <!-- <tx:method name="*" />  --> 
	    </tx:attributes>  
	</tx:advice>  
	<!-- 切面的配置 -->
	<aop:config>  
	    <aop:pointcut id="businessOper"  
	        expression="execution(* com.neusoft.service.*.*(..))" />  
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="businessOper" />  
	</aop:config>  
	<!-- 
	补充： 
		execution(* *..BookManager.save(..))的解读: 
		第一颗* 代表ret-type-pattern 返回值可任意， 
		*..BookManager 代表任意Pacakge里的BookManager类。 
		如果写成com.xyz.service.* 则代表com.xyz.service下的任意类 
		com.xyz.service..* com.xyz.service则代表com.xyz.service及其子package下的任意类 
		save代表save方法，也可以写save* 代表saveBook()等方法 
		(..) 匹配0个参数或者多个参数的，任意类型 
		(x,..) 第一个参数的类型必须是X 
		(x,,,s,..) 匹配至少4个参数，第一个参数必须是x类型，第二个和第三个参数可以任意，第四个必须是s类型。 
		注意事项： 
		1. name-pattern千万不要写成*..*Manager ，这样子会把所有第三方类库的Manager比如Spring的PlatformTranstationManager 也加入aop，非常危险。所以最好还是加上项目的package前缀，如"org.springside..*Manager"		
		2. 因为有*，会修饰所有方法，有些hibernateTemplate的final的方法不能被cglib修改，会抛warning，无害。
		
		常见切入点表达式的例子:
			execution(* *(..))   匹配所有方法
			execution(public * *(..)) 任意公共方法的执行
			execution(* set*(..)) 任何一个以“set”开始的方法的执行
			execution(* com.service.UserService.*(..))	 UserService 接口的任意方法的执行
			execution(* com.service.*.*(..)) 定义在service包里的任意方法的执行
			execution(* com.service..*.*(..)) 定义在service包或者子包里的任意方法的执行			
	 -->
	
	<!-- 引入模块配：  可以按照模块划分， 也可以按照层划分 -->	
	<import resource="beans_dept.xml"/>	
	<import resource="beans_post.xml"/>	
	<import resource="beans_emp.xml"/>

	<!-- <bean id="com.neusoft.dao.PostDAO" class="com.neusoft.dao.PostDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="com.neusoft.dao.EmpDAO" class="com.neusoft.dao.EmpDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean> -->

</beans>